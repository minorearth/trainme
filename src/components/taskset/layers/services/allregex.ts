export const allregex : { [key: string]: {findmode: string; type?: string; nm?: string; param?: string;caption: string; ex: string; rgx: string[]};}= {'fline': {'findmode': 'regex', 'caption': 'f-строки', 'ex': "Пример: f'Привет, {a}", 'rgx': ['f[\\"\']{1,3}']}, 'for': {'findmode': 'ast', 'type': 'node', 'nm': 'For', 'param': '', 'caption': 'цикл for', 'ex': 'Нет примера', 'rgx': ['\\bfor\\b']}, 'condition': {'findmode': 'regex', 'caption': 'условие', 'ex': 'Нет примера', 'rgx': ['\\bif\\b']}, 'forin': {'findmode': 'ast', 'type': 'node', 'nm': 'For', 'param': 'forinnotrange', 'caption': 'for in', 'ex': 'Нет примера', 'rgx': ['\\bfor\\b\\s+.+\\bin\\b\\s+(?!range\\b)']}, 'ifin': {'findmode': 'regex', 'caption': 'условный оператор in', 'ex': 'Пример: if a in b: print(a)', 'rgx': ['if.*?\\bin\\b.*:']}, 'listcomp': {'findmode': 'ast', 'type': 'node', 'nm': 'ListComp', 'param': '', 'caption': 'списковые включения', 'ex': 'Пример: [i for i in range(a)]', 'rgx': ['[\\[\\(].*?\\bfor\\b\\s+.*?\\bin\\b.*?[\\]\\)]']}, 'GeneratorExp': {'findmode': 'ast', 'type': 'node', 'nm': 'GeneratorExp', 'param': '', 'caption': 'генераторы', 'ex': 'Пример: (i for i in range(a))', 'rgx': ['[\\[\\(].*?\\bfor\\b\\s+.*?\\bin\\b.*?[\\]\\)]']}, 'index': {'findmode': 'regex', 'caption': 'индексы', 'ex': 'Пример: a=b[2]', 'rgx': ['\\[.*?\\]']}, 'slices': {'findmode': 'ast', 'type': 'node', 'nm': 'Slice', 'param': '', 'caption': 'срезы', 'ex': 'Пример: a=b[1:5:-1]', 'rgx': ['\\[[^\\]\\[]*:[^\\]\\[]*\\]']}, 'ternary': {'findmode': 'ast', 'type': 'node', 'nm': 'IfExp', 'param': '', 'caption': 'тернарный оператор', 'ex': 'Пример: a if a>b else b', 'rgx': ['if[^:]*else']}, 'import': {'findmode': 'regex', 'caption': 'Библиотеки python', 'ex': '', 'rgx': ['\\bimport\\b']}, 'append': {'findmode': 'ast', 'type': 'method', 'nm': 'append', 'param': '', 'caption': 'списки', 'ex': 'Пример, a.append(b), print(a[i])', 'rgx': ['\\.\\s*\\bappend\\b\\s*\\(.*?\\)']}, 'join': {'findmode': 'regex', 'caption': 'join', 'ex': "Пример: a=''.join(b)", 'rgx': ['join\\s*\\(.*?\\)']}, 'split': {'findmode': 'regex', 'caption': 'split', 'ex': 'Пример: a=b.split()', 'rgx': ['\\bsplit\\b\\s*\\(.*?\\)|\\bsplit\\b']}, 'find': {'findmode': 'regex', 'caption': 'find', 'ex': "Пример: a=b.find('A')", 'rgx': ['\\bfind\\b\\s*\\(.*?\\)|\\bfind\\b']}, 'rfind': {'findmode': 'regex', 'caption': 'rfind', 'ex': "Пример: a=b.rfind('A')", 'rgx': ['\\brfind\\b\\s*\\(.*?\\)|\\brfind\\b']}, 'strip': {'findmode': 'regex', 'caption': 'strip', 'ex': 'Нет примера', 'rgx': ['\\bstrip\\b\\s*\\(.*?\\)|\\bstrip\\b']}, 'replace': {'findmode': 'regex', 'caption': 'replace', 'ex': "Пример: a=a.replace('A','B')", 'rgx': ['\\breplace\\b\\s*\\(.*?\\)|\\breplace\\b']}, 'or': {'findmode': 'regex', 'caption': 'or', 'ex': 'Нет примера', 'rgx': ['\\bor\\b']}, 'and': {'findmode': 'regex', 'caption': 'and', 'ex': 'Нет примера', 'rgx': ['\\band\\b']}, 'not': {'findmode': 'regex', 'caption': 'not', 'ex': 'Нет примера', 'rgx': ['\\bnot\\b']}, 'end': {'findmode': 'ast', 'type': 'function', 'nm': 'print', 'param': 'end', 'caption': 'end', 'ex': 'Нет примера', 'rgx': ['print\\s*\\(.*?end\\s*=\\s*[\\"\'].*?[\\"\'].*?\\)']}, 'sep': {'findmode': 'regex', 'caption': 'sep', 'ex': 'Нет примера', 'rgx': ['print\\s*\\(.*?sep\\s*=\\s*[\\"\'].*?[\\"\'].*?\\)']}, 'count': {'findmode': 'ast', 'type': 'method', 'nm': 'count', 'param': '', 'caption': 'count', 'ex': "Пример: a.count('A')", 'rgx': ['\\bcount\\b\\s*\\(.*?\\)|\\bcount\\b']}, 'comma': {'findmode': 'regex', 'caption': 'запятая', 'ex': 'Нет примера', 'rgx': [',']}, 'plus': {'findmode': 'regex', 'caption': 'плюс', 'ex': 'Нет примера', 'rgx': ['\\+']}, 'minus': {'findmode': 'regex', 'caption': 'минус', 'ex': 'Нет примера', 'rgx': ['-']}, 'sqbrackopen': {'findmode': 'regex', 'caption': '[', 'ex': 'Нет примера', 'rgx': ['\\[']}, 'sqbrackclosed': {'findmode': 'regex', 'caption': ']', 'ex': 'Нет примера', 'rgx': ['\\]']}, 'div': {'findmode': 'regex', 'caption': 'деление нацело', 'ex': 'Нет примера', 'rgx': ['\\/\\/']}, 'ext': {'findmode': 'regex', 'caption': 'степень', 'ex': 'Нет примера', 'rgx': ['\\*\\*']}, 'mult': {'findmode': 'regex', 'caption': 'умножение', 'ex': 'Нет примера', 'rgx': ['\\*']}, 'perc': {'findmode': 'regex', 'caption': 'остаток', 'ex': 'Нет примера', 'rgx': ['%']}, 'neq': {'findmode': 'regex', 'caption': 'neq', 'ex': 'Нет примера', 'rgx': ['!=']}, 'sum': {'findmode': 'regex', 'type': 'function', 'nm': 'sum', 'param': '', 'caption': 'sum', 'ex': 'Пример: sum([1,2,3])', 'rgx': ['\\bsum\\b\\s*\\(.*?\\)|\\bsum\\b']}, 'max': {'findmode': 'regex', 'caption': 'max', 'ex': 'Пример: max([1,2,3])', 'rgx': ['\\bmax\\b\\s*\\(.*?\\)|\\bmax\\b']}, 'min': {'findmode': 'regex', 'caption': 'min', 'ex': 'Пример: min([1,2,3]', 'rgx': ['\\bmin\\b\\s*\\(.*?\\)|\\bmin\\b']}, 'len': {'findmode': 'regex', 'caption': 'len', 'ex': "Пример: len([1,2,3]),len('ABC')", 'rgx': ['\\blen\\b\\s*\\(.*?\\)|\\blen\\b']}, 'map': {'findmode': 'regex', 'caption': 'map', 'ex': 'Пример: map(int, a)', 'rgx': ['\\bmap\\b\\s*\\(.*?\\)|\\bmap\\b']}, 'set': {'findmode': 'regex', 'caption': 'set', 'ex': 'Нет примера', 'rgx': ['\\bset\\b\\s*\\(.*?\\)|\\bset\\b']}, 'list': {'findmode': 'regex', 'caption': 'list', 'ex': "Пример: list('ABC')", 'rgx': ['\\blist\\b\\s*\\(.*?\\)|\\blist\\b']}, 'sorted': {'findmode': 'regex', 'caption': 'sorted', 'ex': 'Нет примера', 'rgx': ['\\bsorted\\b\\s*\\(.*?\\)|\\bsorted\\b']}, 'int': {'findmode': 'regex', 'caption': 'int', 'ex': 'Нет примера', 'rgx': ['\\bint\\b\\s*\\(.*?\\)|\\bint\\b']}, 'str': {'findmode': 'regex', 'caption': 'str', 'ex': 'Нет примера', 'rgx': ['\\bstr\\b\\s*\\(.*?\\)|\\bstr\\b']}}