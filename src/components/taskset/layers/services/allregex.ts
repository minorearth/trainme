export const allregex = {'fline': {'caption': 'f-строки', 'ex': "Пример: f'Привет, {a}", 'rgx': ['f[\\"\']']}, 'for': {'caption': 'цикл for', 'ex': 'Нет примера', 'rgx': ['\\bfor\\b']}, 'listcomp': {'caption': 'списковые включения', 'ex': 'Пример: [i for i in range(a)]', 'rgx': ['[\\[(].*for[^:]*in.*[\\])]']}, 'index': {'caption': 'индексы', 'ex': 'Пример: a=b[2]', 'rgx': ['\\[.*\\]']}, 'slices': {'caption': 'срезы', 'ex': 'Пример: a=b[1:5:-1]', 'rgx': ['\\[[^\\]\\[]*:[^\\]\\[]*\\]']}, 'array': {'caption': 'списки', 'ex': 'Пример, a.append(b), print(a[i])', 'rgx': ['append *\\(.*\\)']}, 'ternary': {'caption': 'тернарный оператор', 'ex': 'Пример: a if a>b else b', 'rgx': ['if[^:]*else']}, 'inop': {'caption': 'условный оператор in', 'ex': 'Пример: if a in b: print(a)', 'rgx': ['if.* in .*:']}, 'sum': {'caption': 'sum', 'ex': 'Пример: sum([1,2,3])', 'rgx': ['sum *\\(.*\\)|\\bsum\\b']}, 'count': {'caption': 'count', 'ex': "Пример: a.count('A')", 'rgx': ['count *\\(.*\\)|\\bcount\\b']}, 'max': {'caption': 'max', 'ex': 'Пример: max([1,2,3])', 'rgx': ['max *\\(.*\\)|\\bmax\\b']}, 'min': {'caption': 'min', 'ex': 'Пример: min([1,2,3]', 'rgx': ['min *\\(.*\\)|\\bmin\\b']}, 'len': {'caption': 'len', 'ex': "Пример: len([1,2,3]),len('ABC')", 'rgx': ['len *\\(.*\\)|\\blen\\b']}, 'map': {'caption': 'map', 'ex': 'Пример: map(int, a)', 'rgx': ['map *\\(.*\\)|\\bmap\\b']}, 'set': {'caption': 'set', 'ex': 'Нет примера', 'rgx': ['set *\\(.*\\)']}, 'list': {'caption': 'list', 'ex': "Пример: list('ABC')", 'rgx': ['list *\\(.*\\)|\\blist\\b']}, 'join': {'caption': 'join', 'ex': "Пример: a=''.join(b)", 'rgx': ['join *\\(.*\\)']}, 'split': {'caption': 'split', 'ex': 'Пример: a=b.split()', 'rgx': ['split *\\(.*\\)']}, 'find': {'caption': 'find', 'ex': "Пример: a=b.find('A')", 'rgx': ['find *\\(.*\\)']}, 'rfind': {'caption': 'rfind', 'ex': "Пример: a=b.rfind('A')", 'rgx': ['rfind *\\(.*\\)']}, 'sorted': {'caption': 'sorted', 'ex': 'Нет примера', 'rgx': ['sorted *\\(.*\\)']}, 'strip': {'caption': 'strip', 'ex': 'Нет примера', 'rgx': ['strip *\\(.*\\)']}, 'replace': {'caption': 'replace', 'ex': "Пример: a=a.replace('A','B')", 'rgx': ['replace *\\(.*\\)']}, 'import': {'caption': 'Библиотеки python', 'ex': '', 'rgx': ['import']}, 'or': {'caption': 'or', 'ex': 'Нет примера', 'rgx': [' or ']}, 'and': {'caption': 'and', 'ex': 'Нет примера', 'rgx': [' and ']}, 'not': {'caption': 'not', 'ex': 'Нет примера', 'rgx': [' not ']}, 'end': {'caption': 'end', 'ex': 'Нет примера', 'rgx': ['print\\s*\\(.*?end\\s*=\\s*[\\"\'].*?[\\"\'].*?\\)']}, 'sep': {'caption': 'sep', 'ex': 'Нет примера', 'rgx': ['print\\s*\\(.*?sep\\s*=\\s*[\\"\'].*?[\\"\'].*?\\)']}, 'forin': {'caption': 'for in', 'ex': 'Нет примера', 'rgx': ['\\bfor\\b\\s+[^:]*\\s+\\bin\\b(?!\\s*range)']}, 'comma': {'caption': 'запятая', 'ex': 'Нет примера', 'rgx': [',']}, 'plus': {'caption': 'плюс', 'ex': 'Нет примера', 'rgx': ['\\+']}, 'minus': {'caption': 'минус', 'ex': 'Нет примера', 'rgx': ['-']}, 'sqbrackopen': {'caption': '[', 'ex': 'Нет примера', 'rgx': ['\\[']}, 'sqbrackclosed': {'caption': ']', 'ex': 'Нет примера', 'rgx': ['\\]']}, 'div': {'caption': 'деление нацело', 'ex': 'Нет примера', 'rgx': ['\\/\\/']}, 'ext': {'caption': 'степень', 'ex': 'Нет примера', 'rgx': ['\\*\\*']}, 'mult': {'caption': 'умножение', 'ex': 'Нет примера', 'rgx': ['\\*']}, 'perc': {'caption': 'остаток', 'ex': 'Нет примера', 'rgx': ['%']}, 'condition': {'caption': 'условие', 'ex': 'Нет примера', 'rgx': ['if']}, 'int': {'caption': 'int', 'ex': 'Нет примера', 'rgx': ['int']}, 'str': {'caption': 'str', 'ex': 'Нет примера', 'rgx': ['str *\\(.*\\)']}, 'neq': {'caption': 'neq', 'ex': 'Нет примера', 'rgx': ['!=']}}