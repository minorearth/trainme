const words = [
  "he",
  "more",
  "sentence",
  "between",
  "of",
  "day",
  "set",
  "city",
  "to",
  "could",
  "three",
  "tree",
  "and",
  "go",
  "want",
  "cross",
  "a",
  "come",
  "air",
  "since",
  "in",
  "did",
  "well",
  "hard",
  "is",
  "my",
  "also",
  "start",
  "it",
  "sound",
  "play",
  "might",
  "you",
  "no",
  "small",
  "story",
  "that",
  "most",
  "end",
  "saw",
  "he",
  "number",
  "put",
  "far",
  "was",
  "who",
  "home",
  "sea",
  "for",
  "over",
  "read",
  "draw",
  "on",
  "know",
  "hand",
  "left",
  "are",
  "water",
  "port",
  "late",
  "with",
  "than",
  "large",
  "run",
  "as",
  "call",
  "spell",
  "don't",
  "I",
  "first",
  "add",
  "while",
  "his",
  "people",
  "even",
  "press",
  "they",
  "may",
  "land",
  "close",
  "be",
  "down",
  "here",
  "night",
  "at",
  "side",
  "must",
  "real",
  "one",
  "been",
  "big",
  "life",
  "have",
  "now",
  "high",
  "few",
  "this",
  "find",
  "such",
  "stop",
  "from",
  "any",
  "follow",
  "open",
  "or",
  "new",
  "act",
  "seem",
  "had",
  "work",
  "why",
  "together",
  "by",
  "part",
  "ask",
  "next",
  "hot",
  "take",
  "men",
  "white",
  "but",
  "get",
  "change",
  "children",
  "some",
  "place",
  "went",
  "begin",
  "what",
  "made",
  "light",
  "got",
  "there",
  "live",
  "kind",
  "walk",
  "we",
  "where",
  "off",
  "example",
  "can",
  "after",
  "need",
  "ease",
  "out",
  "back",
  "house",
  "paper",
  "other",
  "little",
  "picture",
  "often",
  "were",
  "only",
  "try",
  "always",
  "all",
  "round",
  "us",
  "music",
  "your",
  "man",
  "again",
  "those",
  "when",
  "year",
  "animal",
  "both",
  "up",
  "came",
  "point",
  "mark",
  "use",
  "show",
  "mother",
  "book",
  "word",
  "every",
  "world",
  "letter",
  "how",
  "good",
  "near",
  "until",
  "said",
  "me",
  "build",
  "mile",
  "an",
  "give",
  "self",
  "river",
  "each",
  "our",
  "earth",
  "car",
  "she",
  "under",
  "father",
  "feet",
  "which",
  "name",
  "head",
  "care",
  "do",
  "very",
  "stand",
  "second",
  "their",
  "through",
  "own",
  "group",
  "time",
  "just",
  "page",
  "carry",
  "if",
  "form",
  "should",
  "took",
  "will",
  "much",
  "country",
  "rain",
  "way",
  "great",
  "found",
  "eat",
  "about",
  "think",
  "answer",
  "room",
  "many",
  "say",
  "school",
  "friend",
  "then",
  "help",
  "grow",
  "began",
  "them",
  "low",
  "study",
  "idea",
  "would",
  "line",
  "still",
  "fish",
  "write",
  "before",
  "learn",
  "mountain",
  "like",
  "turn",
  "plant",
  "north",
  "so",
  "cause",
  "cover",
  "once",
  "these",
  "same",
  "food",
  "base",
  "her",
  "mean",
  "sun",
  "hear",
  "long",
  "differ",
  "four",
  "horse",
  "make",
  "move",
  "thought",
  "cut",
  "thing",
  "right",
  "let",
  "sure",
  "see",
  "boy",
  "keep",
  "watch",
  "him",
  "old",
  "eye",
  "color",
  "two",
  "too",
  "never",
  "face",
  "has",
  "does",
  "last",
  "wood",
  "look",
  "tell",
  "door",
  "main",
];

//ex.
//leafNum=7
//total=25
//[3,4,3,4,3,4,4]
export const spreadNumbersOverNodesRandomly = (leafNum, total) => {
  const remainder = total % leafNum;
  const base = Math.floor(total / leafNum);
  const res = Array(leafNum).fill(base);
  getNeverRepeatIntegers(leafNum, remainder).forEach(
    (item) => (res[item] += 1)
  );
  return res;
};

//ex.  n-number of tasks to allocate, length-folders  num   n<length
//n=4 length=7
//res=[3,1,6,5]
export const getNeverRepeatIntegers = (length, n) => {
  let res = [];
  while (res.length != n) {
    const num = Math.floor(Math.random() * length);
    !res.includes(num) && (res = [...res, num]);
  }
  return res;
};

export const randomNum = (length) => {
  return Math.floor(Math.random() * length);
};

//ex.
//listToPickFrom=['a','b','c']
//numToPick=2
//res=>['a','c']
export const pickRandomItemsFromList = (numToPick, listToPickFrom) => {
  if (numToPick < listToPickFrom.length) {
    const NeverRepeatIntegers = getNeverRepeatIntegers(
      listToPickFrom.length,
      numToPick
    );
    return NeverRepeatIntegers.map((dd) => listToPickFrom[dd]);
  } else {
    return listToPickFrom;
  }
};

const pickRandomSingleFromList = (listToPickFrom) => {
  const num = Math.floor(Math.random() * listToPickFrom.length);
  return listToPickFrom[num];
};

export const getRandomWordNumberString = () => {
  const word = pickRandomSingleFromList(words);
  const num = randomNum(9999);
  return `${word}${num}`;
};

const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

export const generateString = (length) => {
  let result = "";
  const charactersLength = characters.length;
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }

  return result;
};
