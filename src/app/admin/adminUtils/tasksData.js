export const testsall = [
  {
    chapterid: "4680f00b-b586-413c-890a-9669b4b7b1c3",
    task: "На входе программы 3 пары чисел, сложи их попарно. Результат напечатай с помощью команды print. В программе используй функцию разделения строк и функцию суммирования.",
    id: 1,
    rightcode:
      "for i in range(3):\n    print(sum(map(int, input().split())))  # Печать",
    defaultcode:
      "for i in range(3):\n    print(sum(map(int, input().split())))  # Печать",
    defaultinput: ["1 3", "2 4", "3 4"],
    defaultoutput: ["4", "6", "7"],
    inout: [
      { inv: ["1 2", "2 4", "3 4"], outv: ["3", "6", "7"] },
      { inv: ["1 3", "2 5", "3 6"], outv: ["4", "7", "9"] },
    ],
    restrictions: {
      maxlines: 2,
      forbidden: ["+", "["],
      forbiddenRe: ["\\[.*?\\]", "\\[.*?\\]"],
      musthave: ["split", "sum"],
      musthaveRe: ["sum.*split", "sum.*split"],
    },
  },
  {
    chapterid: "4680f00b-b586-413c-890a-9669b4b7b1c3",
    task: "Раздели число в переменной a на 3 нацело. Используй оператор целочисленного деления.",
    id: 2,
    rightcode: "a = input()\nprint(int(a) // 3)",
    defaultcode: "a = input()\nprint(int(a) // 3)",
    defaultinput: ["8"],
    defaultoutput: ["2"],
    inout: [
      { inv: ["11"], outv: ["3"] },
      { inv: ["23"], outv: ["7"] },
    ],
    restrictions: {
      maxlines: 2,
      forbidden: [],
      forbiddenRe: [],
      musthave: ["//"],
      musthaveRe: [],
    },
  },
];

// export const testsall = [
//   {
//     chapterid: "9015cd79-7e2e-4b07-a663-231d6dcc6dd6",
//     id: 1,
//     task: "На входе программы 3 пары чисел, сложи их попарно. Результат напечатай с помощью команды print. В программе используй функцию разделения строк и функцию суммирования.",
//     defaultinput: ["1 2", "2 4", "3 4"],
//     defaultoutput: ["3", "6", "7"],
//     defaultcode:
//       "for i in range(3):\n    print(sum(map(int,input().split()))) #Печать",
//     rightcode:
//       "for i in range(3):\n    print(sum(map(int,input().split()))) #Печать",
//     inout: [
//       { inv: ["1 2", "2 4", "3 4"], outv: ["3", "6", "7"] },
//       { inv: ["1 3", "2 4", "3 4"], outv: ["4", "6", "7"] },
//     ],
//     restrictions: {
//       maxlines: 3,
//       musthave: ["split", "sum"],
//       musthaveRe: [],
//       forbidden: ["+", "["],
//       forbiddenRe: ["[[].*?]", "[[].*?]"],
//     },
//   },
//   {
//     chapterid: "9015cd79-7e2e-4b07-a663-231d6dcc6dd6",
//     id: 2,
//     task: "Раздели число в переменной a на 3 нацело. Используй оператор целочисленного деления.",
//     defaultinput: ["8"],
//     defaultoutput: ["6"],
//     defaultcode: "a=input()\nprint(int(a/3))",
//     rightcode: "a=input()\nprint(int(a)//3)",
//     inout: [
//       { inv: ["19"], outv: ["6"] },
//       { inv: ["20"], outv: ["6"] },
//     ],
//     restrictions: {
//       maxlines: 2,
//       musthave: ["//"],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "9015cd79-7e2e-4b07-a663-231d6dcc6dd6",
//     id: 3,
//     task: "Используя цикл выведи числа 1,2,3. Каждое число на отдельной строке",
//     defaultinput: [],
//     defaultoutput: ["1", "2", "3"],
//     defaultcode: "for i in range(1,4):\n    print(i)",
//     rightcode: "for i in range(1,4):\n    print(i)",
//     inout: [
//       { inv: [], outv: ["1", "2", "3"] },
//       { inv: [], outv: ["1", "2", "3"] },
//     ],
//     restrictions: {
//       maxlines: 2,
//       musthave: [],
//       musthaveRe: ["[[].*for.*in.*]", "[[].*for.*in.*]"],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "9015cd79-7e2e-4b07-a663-231d6dcc6dd6",
//     id: 4,
//     task: "На входе программы 3 числа, возведи каждое в квадрат",
//     defaultinput: ["1", "2", "3"],
//     defaultoutput: ["1", "4", "9"],
//     defaultcode: "for i in range(1,4):\n    print(int(input())**2)",
//     rightcode: "for i in range(1,4):\n    print(int(input())**2)",
//     inout: [
//       { inv: ["1", "2", "3"], outv: ["1", "4", "9"] },
//       { inv: ["2", "2", "2"], outv: ["4", "4", "4"] },
//     ],
//     restrictions: {
//       maxlines: 3,
//       musthave: ["for"],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "c6eda8dc-cf82-4e44-8035-90139fcaa483",
//     id: 5,
//     task: "На входе программы 8 чисел, вычти из каждого следующего - предыдущее. Из первого числа ничего вычитать не нужно. Результат сложи",
//     defaultinput: ["1 2 3 4 5 6 7 8"],
//     defaultoutput: ["7"],
//     defaultcode:
//       "a=input()\nb=a.split()\nsumm=0\nfor i in range(len(b)-1):\n    summ+=int(b[i+1])-int(b[i])\nprint(summ)",
//     rightcode:
//       "a=input()\nb=a.split()\nsumm=0\nfor i in range(len(b)-1):\n    summ+=int(b[i+1])-int(b[i])\nprint(summ)",
//     inout: [
//       { inv: ["1 2 3 4 5 6 7 8"], outv: ["7"] },
//       { inv: ["1 2 3 4 5 6 7"], outv: ["6"] },
//     ],
//     restrictions: {
//       maxlines: 7,
//       musthave: ["for", "split", "int"],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "c6eda8dc-cf82-4e44-8035-90139fcaa483",
//     id: 6,
//     task: "Выведи: Я знаю команду print",
//     defaultinput: [],
//     defaultoutput: ["Я знаю команду print"],
//     defaultcode: "print('Я знаю команду print')",
//     rightcode: "print('Я знаю команду print')",
//     inout: [
//       { inv: [], outv: ["Я знаю команду print"] },
//       { inv: [], outv: ["Я знаю команду print"] },
//     ],
//     restrictions: {
//       maxlines: 1,
//       musthave: ["print"],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "c6eda8dc-cf82-4e44-8035-90139fcaa483",
//     id: 7,
//     task: "Выведи: 1 2 3",
//     defaultinput: [],
//     defaultoutput: ["1 2 3"],
//     defaultcode: "print('1 2 3')",
//     rightcode: "print('1 2 3')",
//     inout: [
//       { inv: [], outv: ["1 2 3"] },
//       { inv: [], outv: ["1 2 3"] },
//     ],
//     restrictions: {
//       maxlines: 1,
//       musthave: ["print"],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "c6eda8dc-cf82-4e44-8035-90139fcaa483",
//     id: 8,
//     task: "Выведи: 1 2 3. В программе должны обязательно присутствовать запятые",
//     defaultinput: [],
//     defaultoutput: ["1 2 3"],
//     defaultcode: "print(1, 2, 3)",
//     rightcode: "print('1, 2, 3')",
//     inout: [
//       { inv: [], outv: ["1 2 3"] },
//       { inv: [], outv: ["1 2 3"] },
//     ],
//     restrictions: {
//       maxlines: 1,
//       musthave: ["print", ","],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "c6eda8dc-cf82-4e44-8035-90139fcaa483",
//     id: 9,
//     task: "Выведи две строчки:\n1 2 3\nОдин, В программе должны обязательно присутствовать запятые",
//     defaultinput: [],
//     defaultoutput: ["1 2 3", "Один Два Три"],
//     defaultcode: "print(1, 2, 3)\nprint('Один','Два','Три')",
//     rightcode: "print('1, 2, 3')",
//     inout: [
//       { inv: [], outv: ["1 2 3", "Один Два Три"] },
//       { inv: [], outv: ["1 2 3", "Один Два Три"] },
//     ],
//     restrictions: {
//       maxlines: 2,
//       musthave: ["print", ","],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "44d40a6b-55bb-41e6-89e3-a474ec7c9140",
//     id: 10,
//     task: null,
//     defaultinput: [],
//     defaultoutput: [],
//     defaultcode: null,
//     rightcode: null,
//     inout: [
//       { inv: [], outv: [] },
//       { inv: [], outv: [] },
//     ],
//     restrictions: {
//       maxlines: null,
//       musthave: [],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "44d40a6b-55bb-41e6-89e3-a474ec7c9140",
//     id: 11,
//     task: null,
//     defaultinput: [],
//     defaultoutput: [],
//     defaultcode: null,
//     rightcode: null,
//     inout: [
//       { inv: [], outv: [] },
//       { inv: [], outv: [] },
//     ],
//     restrictions: {
//       maxlines: null,
//       musthave: [],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "44d40a6b-55bb-41e6-89e3-a474ec7c9140",
//     id: 12,
//     task: null,
//     defaultinput: [],
//     defaultoutput: [],
//     defaultcode: null,
//     rightcode: null,
//     inout: [
//       { inv: [], outv: [] },
//       { inv: [], outv: [] },
//     ],
//     restrictions: {
//       maxlines: null,
//       musthave: [],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "44d40a6b-55bb-41e6-89e3-a474ec7c9140",
//     id: 13,
//     task: null,
//     defaultinput: [],
//     defaultoutput: [],
//     defaultcode: null,
//     rightcode: null,
//     inout: [
//       { inv: [], outv: [] },
//       { inv: [], outv: [] },
//     ],
//     restrictions: {
//       maxlines: null,
//       musthave: [],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "44d40a6b-55bb-41e6-89e3-a474ec7c9140",
//     id: 14,
//     task: null,
//     defaultinput: [],
//     defaultoutput: [],
//     defaultcode: null,
//     rightcode: null,
//     inout: [
//       { inv: [], outv: [] },
//       { inv: [], outv: [] },
//     ],
//     restrictions: {
//       maxlines: null,
//       musthave: [],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
//   {
//     chapterid: "44d40a6b-55bb-41e6-89e3-a474ec7c9140",
//     id: 15,
//     task: null,
//     defaultinput: [],
//     defaultoutput: [],
//     defaultcode: null,
//     rightcode: null,
//     inout: [
//       { inv: [], outv: [] },
//       { inv: [], outv: [] },
//     ],
//     restrictions: {
//       maxlines: null,
//       musthave: [],
//       musthaveRe: [],
//       forbidden: [],
//       forbiddenRe: [],
//     },
//   },
// ];
